import org.apache.tools.ant.filters.ReplaceTokens

plugins {
     id 'java'
     id 'war'
     id 'org.gretty' version '3.0.2'
}

repositories {
     jcenter()      // Bintray's repository - a fast Maven Central mirror & more
}

gretty {

    classPath 'build/resources/main'

    if(project.hasProperty('hostName')) {
        host = hostName
    } else {
        host = 'dev.irishdictionary.online'
    }
    println "host = " + host

    httpPort = project.hasProperty("port") ? port.toInteger() : 8080
    println "httpPort = " + httpPort

    // HTTPS
    //httpsEnabled = true
    //sslKeyStorePath = './bin/mykeystore'
    //sslKeyStorePassword = '50m05D105'

    //servletContainer = 'jetty9.4'
    contextPath = '/'
    //loggingLevel = 'DEBUG'

    //jvmArg '-Dorg.eclipse.jetty.annotations.maxWait=120'
}

List compileList =  [

      "javax.servlet:javax.servlet-api:${project.property('servlet.version')}"
    , "javax.servlet.jsp:javax.servlet.jsp-api:${ project.property('jsp.version') }"
    , 'org.gretty:gretty:3.0.2'

    , "org.apache.logging.log4j:log4j-core:${ project.property('log4j.version') }"
    , "org.apache.logging.log4j:log4j-api:${ project.property('log4j.version') }"

    //, "commons-lang:commons-lang:2.6"
    //, "commons-net:commons-net:3.5"
    , "org.json:json:20140107"
    //, "com.sun.activation:javax.activation:1.2.0"
    //, "com.sun.mail:mailapi:${project.property('javamail.version')}"
    //, "com.sun.mail:smtp:${project.property('javamail.version')}"
    , "mysql:mysql-connector-java:8.0.11"

    // Jetty
    , "org.eclipse.jetty:jetty-annotations:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-server:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-continuation:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-http:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-server:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-servlets:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-servlet:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-webapp:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-util:${project.property('jetty.version')}"
    //, "com.atlassian.commonmark:commonmark:0.10.0"

    , fileTree(dir: 'src/main/webapp/WEB-INF/lib', include: '*.jar')  // local libs
]

dependencies {

    if (project.hasProperty("apachejsp")) compileList << "org.eclipse.jetty:apache-jsp:${project.property('jetty.version')}"  // Apache JSP

    //compile compileList
    implementation compileList

    runtime files('src/main/resources')
}

task dev {
    println 'dev()'

   def buildProperties = new Properties()

    doFirst {
        //def buildProperties = new Properties()
        file("src/main/config/dev.properties").withInputStream {
            stream -> buildProperties.load(stream)
        }

        println buildProperties.getProperty("protocol") + "://" + buildProperties.getProperty("server") + ":" + buildProperties.getProperty("port")

        def server = buildProperties.getProperty("server")
        println "server = " + server

    }
    doLast {
        println 'dev.copy()'
        copy {
            from 'src/main/config/init.properties'
            into 'src/main/webapp/WEB-INF'
            filter(
                ReplaceTokens
                , tokens: buildProperties
            )
        }
    }
}

task prod {
    println 'prod()'

   def buildProperties = new Properties()

    doFirst {
        file("src/main/config/prod.properties").withInputStream {
            stream -> buildProperties.load(stream)
        }
        println buildProperties.getProperty("protocol") + "://" + buildProperties.getProperty("server") + ":" + buildProperties.getProperty("port")
        def server = buildProperties.getProperty("server")
        println "server = " + server
    }

    doLast {
        println 'dev.copy()'
        copy {
            from 'src/main/config/init.properties'
            into 'src/main/webapp/WEB-INF'
            filter(
                ReplaceTokens
              , tokens: buildProperties
            )
        }
    }
}

// E.g. project-name-MAJOR.MINOR.PATCH-BUILD-NUMBER.jar
// E.g. irish-dictionary-online-0.1.0-2-SNAPSHOT.jar
jar.baseName = project.name +'-'+ artifactMajorVersion +'-'+ artifactBuildNumber

task explodedWar(type: Copy) {
    into "$buildDir/exploded"
    with war
}

war.dependsOn explodedWar

war {
    archiveName = project.property('name') +'-'+ artifactMajorVersion +'-'+ artifactBuildNumber + '.war'
}

task copyView(type: Copy) {
    println 'Executing copyView'
    from('src/main/webapp/view') {
        include '**'
        exclude '**/*.bak'
    } 
    into 'build/exploded/view'
}
