import org.apache.tools.ant.filters.ReplaceTokens

plugins {
     id 'java'
     id 'war'
     //id 'org.gretty' version '3.0.2'
}

repositories {
     jcenter()      // Bintray's repository - a fast Maven Central mirror & more
}

/*
gretty {
    classPath 'build/resources/main'
    if(project.hasProperty('hostName')) {
        host = hostName
    } else {
        host = 'dev.irishdictionary.online'
    }
    println "host = " + host
    httpPort = project.hasProperty("port") ? port.toInteger() : 8080
    println "httpPort = " + httpPort
    contextPath = '/'
}
*/

List implementationList =  [

      "jakarta.servlet:jakarta.servlet-api:${project.property('servlet.version')}" // https://mvnrepository.com/artifact/jakarta.servlet
    , "jakarta.servlet.jsp:jakarta.servlet.jsp-api:${ project.property('jsp.version') }" // https://mvnrepository.com/artifact/jakarta.servlet.jsp/jakarta.servlet.jsp-api
    , "org.apache.logging.log4j:log4j-core:${ project.property('log4j.version') }" // https://mvnrepository.com/artifact/log4j/log4j
    , "org.apache.logging.log4j:log4j-api:${ project.property('log4j.version') }"
    , "org.eclipse.jetty:jetty-server:${project.property('jetty.version')}" 
    , "org.eclipse.jetty:jetty-servlet:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-webapp:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-server:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-annotations:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-http:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-servlets:${project.property('jetty.version')}"
    , "org.eclipse.jetty:jetty-util:${project.property('jetty.version')}"
    , "org.eclipse.jetty:apache-jsp:${project.property('jetty.version')}" // https://mvnrepository.com/artifact/org.eclipse.jetty/apache-jsp
    , "org.json:json:20210307"
    , "io.github.cdimascio:java-dotenv:5.2.2"
    , "com.fasterxml.jackson.core:jackson-annotations:2.12.5" // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations"
    , "mysql:mysql-connector-java:8.0.27"

    //, 'org.gretty:gretty:3.0.2'

    //, "org.apache.commons:commons-lang3:3.12.0"
    //, "com.sun.mail:mailapi:1.5.6"
    //, "com.sun.mail:smtp:1.5.6"

    , fileTree(dir: 'src/main/webapp/WEB-INF/lib', include: '*.jar')
]

dependencies {
    compileOnly 'org.projectlombok:lombok:+'
    annotationProcessor 'org.projectlombok:lombok:+'
    implementation implementationList
    //runtime files('src/main/resources')
}

task dev {
    println 'dev()'
   def buildProperties = new Properties()
    doFirst {
        //def buildProperties = new Properties()
        file("src/main/config/dev.properties").withInputStream {
            stream -> buildProperties.load(stream)
        }
        println buildProperties.getProperty("protocol") + "://" + buildProperties.getProperty("server") + ":" + buildProperties.getProperty("port")
        def server = buildProperties.getProperty("server")
        println "server = " + server
    }
    doLast {
        println 'dev.copy()'
        copy {
            from 'src/main/config/init.properties'
            into 'src/main/webapp/WEB-INF'
            filter(
                ReplaceTokens
                , tokens: buildProperties
            )
        }
    }
}

task prod {
    println 'prod()'
   def buildProperties = new Properties()
    doFirst {
        file("src/main/config/prod.properties").withInputStream {
            stream -> buildProperties.load(stream)
        }
        println buildProperties.getProperty("protocol") + "://" + buildProperties.getProperty("server") + ":" + buildProperties.getProperty("port")
        def server = buildProperties.getProperty("server")
        println "server = " + server
    }
    doLast {
        println 'dev.copy()'
        copy {
            from 'src/main/config/init.properties'
            into 'src/main/webapp/WEB-INF'
            filter(
                ReplaceTokens
              , tokens: buildProperties
            )
        }
    }
}

task custombuild {
    println 'Executing '+project.name+'.custombuild()'
    doLast {
        println "$buildName"
        def buildProperties = new Properties()
        file("src/main/config/"+buildName+".properties").withInputStream {
            stream -> buildProperties.load(stream)
        }
        println buildProperties.getProperty("protocol") + "://" + buildProperties.getProperty("server") + ":" + buildProperties.getProperty("port") + buildProperties.getProperty("context")
        def server = buildProperties.getProperty("server")
        println "server = " + server
        copy {
            from 'src/main/config/init.properties'
            into 'src/main/webapp/WEB-INF'
            filter(
                ReplaceTokens
              , tokens: buildProperties
            )
        }
    }
}

// E.g. project-name-MAJOR.MINOR.PATCH-BUILD-NUMBER.jar
// E.g. irish-dictionary-online-0.1.0-2-SNAPSHOT.jar
jar.baseName = project.name +'-'+ artifactMajorVersion +'-'+ artifactBuildNumber

/*
 * https://discuss.gradle.org/t/how-to-automatically-create-exploded-war-without-invoking-a-seperate-task/4479
 */
task explodedWar(type: Copy) {
    into "$buildDir/exploded"
    with war
}

war.dependsOn explodedWar

//apply from: 'version.gradle'

war {
    archiveName = project.name +'-'+ majorVersion +'.'+ minorVersion +'.'+ patchVersion +'.'+ buildNumber + '.war'
    duplicatesStrategy = 'exclude'
}


task copyView(type: Copy) {
    println 'Executing copyView'
    from('src/main/webapp/view') {
        include '**'
        exclude '**/*.bak'
        exclude 'images/*'
    } 
    into 'build/exploded/view'
}